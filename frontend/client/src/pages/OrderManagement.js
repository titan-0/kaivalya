import React, { useState } from 'react';
import { 
  CheckCircle, 
  Clock, 
  AlertTriangle, 
  X, 
  Eye,
  Download,
  Search,
  Package,
  Calendar,
  Truck,
  User
} from 'lucide-react';
import toast from 'react-hot-toast';

const OrderManagement = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [selectedSupplier, setSelectedSupplier] = useState('all');

  // Mock order data
  const orders = [
    {
      id: 'ORD-001',
      productName: 'Organic Bananas',
      supplier: 'Fresh Farms Inc.',
      quantity: 500,
      unitPrice: 0.89,
      totalAmount: 445.00,
      status: 'pending',
      orderDate: '2024-01-20',
      expectedDelivery: '2024-01-22',
      priority: 'high',
      autoGenerated: true,
      approvedBy: null,
      notes: 'High temperature forecast - increased demand expected'
    },
    {
      id: 'ORD-002',
      productName: 'Fresh Milk',
      supplier: 'Dairy Co.',
      quantity: 200,
      unitPrice: 3.99,
      totalAmount: 798.00,
      status: 'approved',
      orderDate: '2024-01-19',
      expectedDelivery: '2024-01-21',
      priority: 'medium',
      autoGenerated: true,
      approvedBy: 'John Manager',
      notes: 'Regular weekly order'
    },
    {
      id: 'ORD-003',
      productName: 'Ice Cream',
      supplier: 'Frozen Delights',
      quantity: 150,
      unitPrice: 4.99,
      totalAmount: 748.50,
      status: 'placed',
      orderDate: '2024-01-18',
      expectedDelivery: '2024-01-20',
      priority: 'high',
      autoGenerated: true,
      approvedBy: 'Sarah Admin',
      notes: 'Heat wave warning - urgent delivery needed'
    },
    {
      id: 'ORD-004',
      productName: 'Bread',
      supplier: 'Local Bakery',
      quantity: 300,
      unitPrice: 2.49,
      totalAmount: 747.00,
      status: 'delivered',
      orderDate: '2024-01-17',
      expectedDelivery: '2024-01-19',
      priority: 'medium',
      autoGenerated: false,
      approvedBy: 'Mike Supervisor',
      notes: 'Manual order - weekend demand'
    },
    {
      id: 'ORD-005',
      productName: 'Bottled Water',
      supplier: 'Pure Water Co.',
      quantity: 400,
      unitPrice: 0.99,
      totalAmount: 396.00,
      status: 'rejected',
      orderDate: '2024-01-16',
      expectedDelivery: '2024-01-18',
      priority: 'high',
      autoGenerated: true,
      approvedBy: null,
      notes: 'Rejected due to budget constraints'
    }
  ];

  const statuses = ['all', 'pending', 'approved', 'placed', 'delivered', 'rejected'];
  const suppliers = ['all', 'Fresh Farms Inc.', 'Dairy Co.', 'Frozen Delights', 'Local Bakery', 'Pure Water Co.'];

  const filteredOrders = orders.filter(order => {
    const matchesSearch = order.productName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         order.id.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = selectedStatus === 'all' || order.status === selectedStatus;
    const matchesSupplier = selectedSupplier === 'all' || order.supplier === selectedSupplier;
    
    return matchesSearch && matchesStatus && matchesSupplier;
  });

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending': return 'text-warning-600 bg-warning-50';
      case 'approved': return 'text-primary-600 bg-primary-50';
      case 'placed': return 'text-success-600 bg-success-50';
      case 'delivered': return 'text-success-600 bg-success-50';
      case 'rejected': return 'text-danger-600 bg-danger-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'pending': return Clock;
      case 'approved': return CheckCircle;
      case 'placed': return Truck;
      case 'delivered': return CheckCircle;
      case 'rejected': return X;
      default: return Clock;
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return 'text-danger-600 bg-danger-50';
      case 'medium': return 'text-warning-600 bg-warning-50';
      case 'low': return 'text-success-600 bg-success-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const handleApprove = (id) => {
    toast.success(`Order ${id} approved successfully!`);
  };

  const handleReject = (id) => {
    toast.error(`Order ${id} rejected!`);
  };

  const handleViewDetails = (id) => {
    toast.info(`Viewing details for order ${id}`);
  };

  const handleDownload = (id) => {
    toast.success(`Downloading order ${id} as PDF`);
  };

  const getTotalOrders = () => filteredOrders.length;
  const getTotalValue = () => filteredOrders.reduce((sum, order) => sum + order.totalAmount, 0);
  const getPendingOrders = () => filteredOrders.filter(order => order.status === 'pending').length;
  const getDeliveredOrders = () => filteredOrders.filter(order => order.status === 'delivered').length;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Order Management</h1>
        <p className="text-gray-600">Manage auto-generated and manual purchase orders</p>
      </div>

      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="card text-center">
          <div className="text-2xl font-bold text-primary-600">{getTotalOrders()}</div>
          <div className="text-sm text-gray-600">Total Orders</div>
        </div>
        <div className="card text-center">
          <div className="text-2xl font-bold text-success-600">${getTotalValue().toLocaleString()}</div>
          <div className="text-sm text-gray-600">Total Value</div>
        </div>
        <div className="card text-center">
          <div className="text-2xl font-bold text-warning-600">{getPendingOrders()}</div>
          <div className="text-sm text-gray-600">Pending Approval</div>
        </div>
        <div className="card text-center">
          <div className="text-2xl font-bold text-success-600">{getDeliveredOrders()}</div>
          <div className="text-sm text-gray-600">Delivered</div>
        </div>
      </div>

      {/* Filters and Search */}
      <div className="card">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
              <input
                type="text"
                placeholder="Search by product name or order ID..."
                className="input-field pl-10"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
          <div className="md:w-48">
            <select
              className="input-field"
              value={selectedStatus}
              onChange={(e) => setSelectedStatus(e.target.value)}
            >
              {statuses.map(status => (
                <option key={status} value={status}>
                  {status === 'all' ? 'All Status' : status.charAt(0).toUpperCase() + status.slice(1)}
                </option>
              ))}
            </select>
          </div>
          <div className="md:w-48">
            <select
              className="input-field"
              value={selectedSupplier}
              onChange={(e) => setSelectedSupplier(e.target.value)}
            >
              {suppliers.map(supplier => (
                <option key={supplier} value={supplier}>
                  {supplier === 'all' ? 'All Suppliers' : supplier}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Orders Table */}
      <div className="card">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="table-header">Order Details</th>
                <th className="table-header">Supplier</th>
                <th className="table-header">Quantity & Price</th>
                <th className="table-header">Status</th>
                <th className="table-header">Priority</th>
                <th className="table-header">Dates</th>
                <th className="table-header">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredOrders.map((order) => {
                const StatusIcon = getStatusIcon(order.status);
                return (
                  <tr key={order.id} className="hover:bg-gray-50">
                    <td className="table-cell">
                      <div>
                        <div className="font-medium text-gray-900">{order.productName}</div>
                        <div className="text-sm text-gray-500">ID: {order.id}</div>
                        <div className="flex items-center mt-1">
                          {order.autoGenerated ? (
                            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800">
                              <Package className="h-3 w-3 mr-1" />
                              Auto-Generated
                            </span>
                          ) : (
                            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                              <User className="h-3 w-3 mr-1" />
                              Manual
                            </span>
                          )}
                        </div>
                      </div>
                    </td>
                    <td className="table-cell">
                      <div className="text-sm text-gray-900">{order.supplier}</div>
                    </td>
                    <td className="table-cell">
                      <div className="text-sm text-gray-900">{order.quantity} units</div>
                      <div className="text-sm text-gray-500">${order.unitPrice}/unit</div>
                      <div className="text-sm font-medium text-gray-900">${order.totalAmount}</div>
                    </td>
                    <td className="table-cell">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(order.status)}`}>
                        <StatusIcon className="h-3 w-3 mr-1" />
                        {order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                      </span>
                      {order.approvedBy && (
                        <div className="text-xs text-gray-500 mt-1">by {order.approvedBy}</div>
                      )}
                    </td>
                    <td className="table-cell">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(order.priority)}`}>
                        {order.priority.charAt(0).toUpperCase() + order.priority.slice(1)}
                      </span>
                    </td>
                    <td className="table-cell">
                      <div className="text-sm text-gray-900">
                        <div className="flex items-center">
                          <Calendar className="h-3 w-3 mr-1 text-gray-400" />
                          {order.orderDate}
                        </div>
                      </div>
                      <div className="text-sm text-gray-500">
                        <div className="flex items-center">
                          <Truck className="h-3 w-3 mr-1 text-gray-400" />
                          {order.expectedDelivery}
                        </div>
                      </div>
                    </td>
                    <td className="table-cell">
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handleViewDetails(order.id)}
                          className="inline-flex items-center p-1 border border-transparent rounded-full shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                          title="View Details"
                        >
                          <Eye className="h-4 w-4" />
                        </button>
                        <button
                          onClick={() => handleDownload(order.id)}
                          className="inline-flex items-center p-1 border border-transparent rounded-full shadow-sm text-white bg-gray-600 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
                          title="Download"
                        >
                          <Download className="h-4 w-4" />
                        </button>
                        {order.status === 'pending' && (
                          <>
                            <button
                              onClick={() => handleApprove(order.id)}
                              className="inline-flex items-center p-1 border border-transparent rounded-full shadow-sm text-white bg-success-600 hover:bg-success-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-success-500"
                              title="Approve"
                            >
                              <CheckCircle className="h-4 w-4" />
                            </button>
                            <button
                              onClick={() => handleReject(order.id)}
                              className="inline-flex items-center p-1 border border-transparent rounded-full shadow-sm text-white bg-danger-600 hover:bg-danger-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-danger-500"
                              title="Reject"
                            >
                              <X className="h-4 w-4" />
                            </button>
                          </>
                        )}
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>

        {filteredOrders.length === 0 && (
          <div className="text-center py-12">
            <AlertTriangle className="mx-auto h-12 w-12 text-gray-400" />
            <h3 className="mt-2 text-sm font-medium text-gray-900">No orders found</h3>
            <p className="mt-1 text-sm text-gray-500">Try adjusting your search or filter criteria.</p>
          </div>
        )}
      </div>

      {/* Order Notes */}
      <div className="card">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Order Notes & Comments</h3>
        <div className="space-y-3">
          {filteredOrders.slice(0, 3).map((order) => (
            <div key={order.id} className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
              <div className="flex-shrink-0">
                <Package className="h-5 w-5 text-gray-400" />
              </div>
              <div className="flex-1">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium text-gray-900">{order.id}</span>
                  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(order.status)}`}>
                    {order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                  </span>
                </div>
                <p className="text-sm text-gray-600 mt-1">{order.notes}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default OrderManagement; 